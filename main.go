package main

import (
	"bufio" //функции для работы с буферизованным вводом и выводом. В данном случае он будет использоваться для чтения данных из сетевого соединения
	"fmt"
	"net"
)

func main() {
	fmt.Println("Запуск сервера...")

	listener, err := net.Listen("tcp", ":8080") //Создает TCP-сервер, который будет слушать входящие соединения на порту 8080.
	if err != nil {                             // ошибка при запуске сервера (например, порт уже занят)
		fmt.Println("Ошибка при запуске сервера:", err)
		return
	}
	defer listener.Close() //Отложенный вызов метода Close() на listener, который будет выполнен в конце функции main. гарантирует: серверный сокет будет закрыт, когда программа завершится, освобождая ресурсы.

	fmt.Println("Ожидание подключения клиента...")

	// Принимаем подключение от клиента
	conn, err := listener.Accept() /* функция блокирует выполнение программы до тех пор, пока не произойдет новое соединение.
	Если соединение успешно установлено, оно сохраняется в переменной conn, а ошибка (если она произошла) — в переменной*/
	if err != nil {
		fmt.Println("Ошибка при принятии соединения:", err)
		return
	}
	defer conn.Close()

	fmt.Println("Клиент подключен.")

	// Читаем сообщения от клиента
	scanner := bufio.NewScanner(conn) /*Создает новый сканер, который будет читать данные из соединения conn*/
	for scanner.Scan() {
		message := scanner.Text()
		fmt.Println("Получено сообщение:", message)
	}

	if err := scanner.Err(); err != nil { /*произошла ли ошибка во время чтения данных.
		  Метод Err() возвращает ошибку, если она произошла во время сканирования. */
		fmt.Println("Ошибка при чтении сообщения:", err)
	}
}
